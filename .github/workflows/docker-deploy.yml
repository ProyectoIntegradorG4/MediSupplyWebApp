name: Construir Imagen Docker y Crear Tag

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: medisupply-webapp
  ECS_SERVICE: medisupply-web
  ECS_CLUSTER: medisupply-cluster
  ECS_TASK_DEFINITION: medisupply-task-definition

jobs:
  build-and-test:
    name: Construir y Probar
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout del c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Instalar dependencias
      run: npm ci
      
    - name: Verificaci√≥n de tipos
      run: npm run type-check
      
    - name: Ejecutar pruebas con cobertura
      run: npm run test:coverage
      
    - name: Construir aplicaci√≥n
      run: npm run build
      
    - name: Subir artefactos de construcci√≥n
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Job de construcci√≥n de imagen Docker
  build-docker-image:
    name: Construir Imagen Docker
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout del c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login a Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Obtener versi√≥n desde package.json
      id: version
      run: |
        echo "Getting version from package.json..."
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "‚úÖ Version set to: $VERSION"
      
    - name: Extraer metadatos
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          
    - name: Construir y subir imagen Docker
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

  # Job para crear tag de release
  create-release-tag:
    name: Crear Tag de Release
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - name: Checkout del c√≥digo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Crear tag
      run: |
        GIT_VERSION=$(node -p "require('./package.json').version")
        echo "Creating git tag: $GIT_VERSION"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$GIT_VERSION" -m "Release $GIT_VERSION"
        git push origin "$GIT_VERSION"
        
    - name: Crear Release
      run: |
        # Get version from package.json for release
        RELEASE_VERSION=$(node -p "require('./package.json').version")
        echo "Creating release: $RELEASE_VERSION"
        
        # Create release using GitHub CLI with simple notes
        gh release create "$RELEASE_VERSION" \
          --title "Release $RELEASE_VERSION" \
          --notes "Release $RELEASE_VERSION - Docker image tagged as latest"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job de despliegue autom√°tico a AWS ECS
  auto-deploy-to-aws:
    name: Despliegue Autom√°tico a AWS ECS
    runs-on: ubuntu-latest
    needs: [build-docker-image, create-release-tag]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout del c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Debug version output
      run: |
        VERSION="${{ needs.build-docker-image.outputs.version }}"
        echo "Version from build-docker-image: '$VERSION'"
        echo "Version length: ${#VERSION}"
        
    - name: Verificar que la imagen existe en ECR
      run: |
        VERSION="${{ needs.build-docker-image.outputs.version }}"
        echo "Verificando imagen: $VERSION"
        
        if [ -z "$VERSION" ]; then
          echo "‚ùå ERROR: Version est√° vac√≠a"
          exit 1
        fi
        
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageTag=$VERSION \
          --region ${{ env.AWS_REGION }}
        echo "‚úÖ Imagen encontrada en ECR"
        
    - name: Descargar definici√≥n de tarea actual
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
        echo "‚úÖ Definici√≥n de tarea descargada"
          
    - name: Actualizar imagen en definici√≥n de tarea
      run: |
        # Construir la URI completa de la imagen
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        VERSION="${{ needs.build-docker-image.outputs.version }}"
        IMAGE_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$VERSION"
        
        echo "Actualizando imagen a: $IMAGE_URI"
        
        # Limpiar la definici√≥n de tarea removiendo campos no permitidos para registro
        jq --arg IMAGE "$IMAGE_URI" '
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) |
          .containerDefinitions[0].image = $IMAGE
        ' task-definition.json > updated-task-definition.json
          
        echo "‚úÖ Definici√≥n de tarea actualizada y limpiada"
          
    - name: Registrar nueva definici√≥n de tarea
      run: |
        NEW_TASK_DEF=$(aws ecs register-task-definition \
          --cli-input-json file://updated-task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "NEW_TASK_DEF=$NEW_TASK_DEF" >> $GITHUB_ENV
        echo "‚úÖ Nueva definici√≥n de tarea registrada: $NEW_TASK_DEF"
          
    - name: Actualizar servicio ECS
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $NEW_TASK_DEF
        echo "‚úÖ Servicio ECS actualizado"
          
    - name: Esperar estabilizaci√≥n del servicio
      run: |
        echo "Esperando estabilizaci√≥n del servicio..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
        echo "‚úÖ Servicio estabilizado"
          
    - name: Verificar despliegue
      run: |
        # Obtener informaci√≥n del servicio
        SERVICE_INFO=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0]')
        
        RUNNING_COUNT=$(echo $SERVICE_INFO | jq -r '.runningCount')
        DESIRED_COUNT=$(echo $SERVICE_INFO | jq -r '.desiredCount')
        
        echo "Tareas ejecut√°ndose: $RUNNING_COUNT/$DESIRED_COUNT"
        
        if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
          echo "‚úÖ Despliegue autom√°tico exitoso - Todas las tareas est√°n ejecut√°ndose"
        else
          echo "‚ùå Despliegue autom√°tico incompleto - Algunas tareas no est√°n ejecut√°ndose"
          exit 1
        fi
          
    - name: Notificar despliegue autom√°tico exitoso
      run: |
        echo "üéâ ¬°Despliegue autom√°tico completado exitosamente!"
        echo "üì¶ Imagen: ${{ needs.build-docker-image.outputs.version }}"
        echo "üè∑Ô∏è Tag: ${{ needs.build-docker-image.outputs.version }}"
        echo "üåç Ambiente: production"
        echo "‚è∞ Timestamp: $(date)"
        echo ""
        echo "üí° Para rollback, usa el workflow de despliegue manual"

