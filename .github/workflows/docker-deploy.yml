name: Construir Imagen Docker y Crear Tag

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: medisupply-webapp

jobs:
  validate-version:
    name: Validar Versión
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para comparar con commits anteriores
        
    - name: Validar que la versión fue actualizada
      run: |
        # Obtener la versión actual del package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Versión actual: $CURRENT_VERSION"
        
        # Obtener la versión del commit anterior
        PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
        echo "Versión anterior: $PREVIOUS_VERSION"
        
        # Comparar versiones usando semver
        if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
          echo "❌ ERROR: La versión en package.json no fue actualizada"
          echo "Versión actual: $CURRENT_VERSION"
          echo "Versión anterior: $PREVIOUS_VERSION"
          echo ""
          echo "Para solucionar esto:"
          echo "1. Actualiza la versión en package.json"
          echo "2. Haz commit de los cambios"
          echo "3. Haz push nuevamente"
          echo ""
          echo "Ejemplo de versionado semántico:"
          echo "- Patch: 1.0.0 → 1.0.1 (correcciones de bugs)"
          echo "- Minor: 1.0.0 → 1.1.0 (nuevas características)"
          echo "- Major: 1.0.0 → 2.0.0 (cambios incompatibles)"
          exit 1
        else
          echo "✅ Versión actualizada correctamente"
          echo "De $PREVIOUS_VERSION → $CURRENT_VERSION"
        fi

  build-and-test:
    name: Construir y Probar
    runs-on: ubuntu-latest
    needs: validate-version
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
      
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Instalar dependencias
      run: npm ci
      
    - name: Verificación de tipos
      run: npm run type-check
      
    - name: Ejecutar pruebas con cobertura
      run: npm run test:coverage
      
    - name: Construir aplicación
      run: npm run build
      
    - name: Subir artefactos de construcción
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Job de construcción de imagen Docker
  build-docker-image:
    name: Construir Imagen Docker
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
      
    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login a Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Obtener versión desde package.json
      id: version
      run: |
        # Obtener versión desde package.json
        VERSION=$(node -p "require('./package.json').version")
        # Agregar commit hash para unicidad
        COMMIT_HASH=$(git rev-parse --short HEAD)
        FULL_VERSION="${VERSION}-${COMMIT_HASH}"
        echo "version=$FULL_VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
        echo "Full version with commit: $FULL_VERSION"
      
    - name: Extraer metadatos
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Construir y subir imagen Docker
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

  # Job para crear tag de release
  create-release-tag:
    name: Crear Tag de Release
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Crear tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ needs.build-docker-image.outputs.version }}" -m "Release ${{ needs.build-docker-image.outputs.version }}"
        git push origin "${{ needs.build-docker-image.outputs.version }}"
        
    - name: Crear Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build-docker-image.outputs.version }}
        release_name: Release ${{ needs.build-docker-image.outputs.version }}
        body: |
          ## Release ${{ needs.build-docker-image.outputs.version }}
          
          ### Docker Image
          - **Tag**: ${{ needs.build-docker-image.outputs.image-tag }}
          - **Digest**: ${{ needs.build-docker-image.outputs.image-digest }}
          
          ### Para desplegar
          Usa el workflow de despliegue manual con el tag: `${{ needs.build-docker-image.outputs.version }}`
        draft: false
        prerelease: false

